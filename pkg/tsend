#!/usr/bin/php
<?php
if(isset($argv[2]) and $argv[1] == "-h"){
	echo "by @sahagk\nUsage: ".$argv[0]." -u\tUpdate Configuration\n".$argv[0]." -i id\tCustom id to send.";
	exit;
}
class Colors {
	private $foreground_colors = array();
	private $background_colors = array();
	public function __construct() {
		// Set up shell colors
		$this->foreground_colors['black'] = '0;30';
		$this->foreground_colors['dark_gray'] = '1;30';
		$this->foreground_colors['blue'] = '0;34';
		$this->foreground_colors['light_blue'] = '1;34';
		$this->foreground_colors['green'] = '0;32';
		$this->foreground_colors['light_green'] = '1;32';
		$this->foreground_colors['cyan'] = '0;36';
		$this->foreground_colors['light_cyan'] = '1;36';
		$this->foreground_colors['red'] = '0;31';
		$this->foreground_colors['light_red'] = '1;31';
		$this->foreground_colors['purple'] = '0;35';
		$this->foreground_colors['light_purple'] = '1;35';
		$this->foreground_colors['brown'] = '0;33';
		$this->foreground_colors['yellow'] = '1;33';
		$this->foreground_colors['light_gray'] = '0;37';
		$this->foreground_colors['white'] = '1;37';
		$this->background_colors['black'] = '40';
		$this->background_colors['red'] = '41';
		$this->background_colors['green'] = '42';
		$this->background_colors['yellow'] = '43';
		$this->background_colors['blue'] = '44';
		$this->background_colors['magenta'] = '45';
		$this->background_colors['cyan'] = '46';
		$this->background_colors['light_gray'] = '47';
	}
		// Returns colored string
	public function getColoredString($string, $foreground_color = null, $background_color = null) {
		$colored_string = "";
			// Check if given foreground color found
		if (isset($this->foreground_colors[$foreground_color])) {
			$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
		}
		// Check if given background color found
		if (isset($this->background_colors[$background_color])) {
			$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
		}
			// Add string and end coloring
		$colored_string .=  $string . "\033[0m";
			return $colored_string;
	}
		// Returns all foreground color names
	public function getForegroundColors() {
		return array_keys($this->foreground_colors);
	}
		// Returns all background color names
	public function getBackgroundColors() {
		return array_keys($this->background_colors);
	}
}
function indent($json) {
  $result      = '';
  $pos         = 0;
  $strLen      = strlen($json);
  $indentStr   = '  ';
  $newLine     = "\n";
  $prevChar    = '';
  $outOfQuotes = true;
  for ($i=0; $i<=$strLen; $i++) {
      // Grab the next character in the string.
        $char = substr($json, $i, 1);
        // Are we inside a quoted string?
        if ($char == '"' && $prevChar != '\\') {
            $outOfQuotes = !$outOfQuotes;

        // If this character is the end of an element,
        // output a new line and indent the next line.
        } else if(($char == '}' || $char == ']') && $outOfQuotes) {
            $result .= $newLine;
            $pos --;
            for ($j=0; $j<$pos; $j++) {
                $result .= $indentStr;
            }
        }

        // Add the character to the result string.
        $result .= $char;

        // If the last character was the beginning of an element,
        // output a new line and indent the next line.
        if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {
            $result .= $newLine;
            if ($char == '{' || $char == '[') {
                $pos ++;
            }

            for ($j = 0; $j < $pos; $j++) {
                $result .= $indentStr;
            }
        }

        $prevChar = $char;
    }

    return $result;
}
if(!is_file($_SERVER['HOME']."/.tsend/tsend.conf") or (isset($argv[1]) and $argv[1] == "-u")){
	system("mkdir -p ".$_SERVER['HOME']."/.tsend");
	$colors = new Colors();
	$config = [];
	echo $colors->getColoredString("[+] Configuration","green")."\n";
	echo "Bot Token : ";
	$config["token"] = trim(fgets(STDIN));
	echo "Chat ID: ";
	$config["chat_id"] = trim(fgets(STDIN));
	$string = json_encode($config);
	file_put_contents($_SERVER['HOME']."/.tsend/tsend.conf",indent($string));
	exit;
}
$config = json_decode(file_get_contents($_SERVER['HOME']."/.tsend/tsend.conf"),true);
$str = "";
while (false !== ($line = fgets(STDIN))) {
    $str .= $line;
    echo $line;
}
	$token = $config['token'];
	$id = $config['chat_id'];
	$message = rawurlencode($str);
	if(isset($argv[2]) and $argv[1] == "-i") $id = $argv[2];
	if(strlen($message) > 4096){
		$file = tmpfile();
		$path = stream_get_meta_data($file)['uri'];
		file_put_contents($path.".txt",$str);
		system ("curl -F chat_id=\"$id\" -F document=@\"$path.txt\" -F caption=\"File size is larger than 4096 bytes\" \"https://api.telegram.org/bot$token/sendDocument\" 2> /dev/null > /dev/null");
		unlink($path);
		unlink($path.".txt");
	}
	else system ("curl \"https://api.telegram.org/bot$token/sendMessage?chat_id=$id&text=".$message."\" 2> /dev/null > /dev/null");
?>
